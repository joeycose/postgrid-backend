"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NO_MAIL_API_KEY = exports.NO_ADDR_API_KEY = exports.mkError = exports.PostGrid = void 0;
var node_fetch_1 = __importDefault(require("node-fetch"));
var path_1 = __importDefault(require("path"));
var camelcase_keys_1 = __importDefault(require("camelcase-keys"));
var contact_1 = require("./contact");
var template_1 = require("./template");
var letter_1 = require("./letter");
var postcard_1 = require("./postcard");
var bank_account_1 = require("./bank-account");
var check_1 = require("./check");
var webhook_1 = require("./webhook");
var address_1 = require("./address");
var ClientVersion = require('../package.json').version;
var PROTOCOL = 'https';
var POSTGRID_HOST = 'api.postgrid.com';
/*
 * This is the main constructor of the PostGrid Client, and will be called
 * with something like:
 *
 *   import { PostGrid } from "postgrid-node-client"
 */
var PostGrid = /** @class */ (function () {
    function PostGrid(apiKeys, options) {
        this.host = (options === null || options === void 0 ? void 0 : options.host) || POSTGRID_HOST;
        // see if we support the legacy usage of just the one Print-Mail key
        if (typeof apiKeys === 'string') {
            this.apiKeys = { mail: apiKeys };
        }
        else {
            this.apiKeys = apiKeys;
        }
        this.webhookUrl = options === null || options === void 0 ? void 0 : options.webhookUrl;
        this.webhookSecret = options === null || options === void 0 ? void 0 : options.webhookSecret;
        this.webhookEvents = options === null || options === void 0 ? void 0 : options.webhookEvents;
        // now construct all the specific domain objects
        this.contact = new contact_1.ContactApi(this, options);
        this.template = new template_1.TemplateApi(this, options);
        this.letter = new letter_1.LetterApi(this, options);
        this.postcard = new postcard_1.PostcardApi(this, options);
        this.bankAccount = new bank_account_1.BankAccountApi(this, options);
        this.check = new check_1.CheckApi(this, options);
        this.webhook = new webhook_1.WebhookApi(this, options);
        this.address = new address_1.AddressApi(this, options);
        // if we have a webhook, then create that now
        if (this.webhookUrl) {
            this.webhook.create({
                url: this.webhookUrl,
                secret: this.webhookSecret,
                enabledEvents: this.webhookEvents,
            });
        }
    }
    /*
     * Function to fire off a GET, PUT, POST, (method) to the uri, preceeded
     * by the host, with the optional query params, and optional body, and
     * puts the 'apiKey' into the headers for the call, and fires off the call
     * to the PostGrid host and returns the response.
     */
    PostGrid.prototype.fire = function (method, uri, headers, query, body) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var url, isForm, response, err_1, response_1, error, payload, payload, _b, err_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        url = new URL(PROTOCOL + '://' + path_1.default.join(this.host, uri));
                        if (query) {
                            Object.keys(query).forEach(function (k) {
                                return url.searchParams.append(k, query[k].toString());
                            });
                        }
                        isForm = isFormData(body);
                        // make the appropriate headers
                        headers = __assign(__assign({}, headers), { Accept: 'application/json', 'X-PostGrid-Client-Ver': ClientVersion });
                        if (!isForm) {
                            headers = __assign(__assign({}, headers), { 'Content-Type': 'application/json' });
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, node_fetch_1.default(url, {
                                method: method,
                                body: isForm ? body : (body ? JSON.stringify(body) : undefined),
                                headers: headers,
                                redirect: 'follow',
                            })];
                    case 2:
                        response = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _c.sent();
                        response_1 = { status: 503 };
                        error = (_a = err_1 === null || err_1 === void 0 ? void 0 : err_1.message) !== null && _a !== void 0 ? _a : "Failed to fetch " + uri;
                        payload = { error: error };
                        return [2 /*return*/, { response: response_1, payload: payload }];
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        _b = camelcase_keys_1.default;
                        return [4 /*yield*/, response.json()];
                    case 5:
                        payload = _b.apply(void 0, [(_c.sent()), { deep: true }]);
                        return [2 /*return*/, { response: response, payload: payload }];
                    case 6:
                        err_2 = _c.sent();
                        return [2 /*return*/, { response: response }];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return PostGrid;
}());
exports.PostGrid = PostGrid;
/*
 * Simple predicate function to return 'true' if the argument is a FormData
 * object - as that is one of the possible values of the 'body' in the fire()
 * function. We have to handle that differently on the call than when it's
 * a more traditional JSON object body.
 */
function isFormData(arg) {
    var ans = false;
    if (arg && typeof arg === 'object') {
        ans = (typeof arg._boundary === 'string' &&
            arg._boundary.length > 20 &&
            Array.isArray(arg._streams));
    }
    return ans;
}
/*
 * Convenience function to create a PostGridError based on a simple message
 * from the Client code. This is an easy way to make PostGridError instances
 * from the simple error messages we have in this code.
 */
function mkError(message) {
    return {
        type: 'client',
        message: message,
    };
}
exports.mkError = mkError;
/*
 * Each function in each Api class needs to test and make sure that the
 * Client has the appropriate API Key for PostGrid to do what it needs
 * to do. So rather than duplicate that code and structure, we simply
 * have it here, so each of the API Keys, and import it in each module.
 */
exports.NO_ADDR_API_KEY = {
    success: false,
    error: mkError('Missing PostGrid Address API Key!'),
};
exports.NO_MAIL_API_KEY = {
    success: false,
    error: mkError('Missing PostGrid Print-Mail API Key!'),
};

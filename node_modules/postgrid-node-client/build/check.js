"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckApi = void 0;
var path_1 = __importDefault(require("path"));
var form_data_1 = __importDefault(require("form-data"));
var _1 = require("./");
var CheckApi = /** @class */ (function () {
    function CheckApi(client, options) {
        this.client = client;
        this.baseRoute = 'print-mail/v1/';
    }
    /*
     * Function to take a Check id and return the Check object in the
     * response. If the check isn't in the system, then we will return
     * the appropriate error.
     */
    CheckApi.prototype.get = function (id) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'cheques', id), { 'x-api-key': this.client.apiKeys.mail })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), check: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to list all the available Checks in the PostGrid set and
     * return them in the response. This will be based on the PostGrid 'List'
     * paging scheme - so there's that.
     */
    CheckApi.prototype.list = function (limit, skip) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'cheques'), { 'x-api-key': this.client.apiKeys.mail }, { skip: skip || 0, limit: limit || 40 })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                checks: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to create a Check within PostGrid, and this will allow for
     * the use of inline HTML, or a Template, or a PDF, or a URL for a PDF.
     * It's all the same to PostGrid, it's just what you provide to it.
     */
    CheckApi.prototype.create = function (check, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var form, _loop_1, _i, _d, _e, k, v, headers, resp;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        form = new form_data_1.default();
                        _loop_1 = function (k, v) {
                            // only add in the entries that have a non-null or defined, value...
                            if (v || v === false || v === 0 || v === '') {
                                switch (k) {
                                    case 'to':
                                    case 'from':
                                    case 'mergeVariables':
                                    case 'metadata':
                                        if (typeof v === 'object') {
                                            Object.entries(v).forEach(function (_a) {
                                                var sk = _a[0], sv = _a[1];
                                                if (sv || sv === false || sv === 0 || sv === '') {
                                                    form.append(k + "[" + sk + "]", sv);
                                                }
                                            });
                                        }
                                        else {
                                            form.append(k, v.toString());
                                        }
                                        break;
                                    case 'letterPDF':
                                        form.append(k, v, 'upload-content.pdf');
                                        break;
                                    case 'sendDate':
                                        if (Object.prototype.toString.call(v) === '[object Date]') {
                                            form.append(k, v.toISOString());
                                        }
                                        else {
                                            form.append(k, v.toString());
                                        }
                                        break;
                                    default:
                                        form.append(k, v.toString());
                                        break;
                                }
                            }
                        };
                        for (_i = 0, _d = Object.entries(check); _i < _d.length; _i++) {
                            _e = _d[_i], k = _e[0], v = _e[1];
                            _loop_1(k, v);
                        }
                        headers = { 'x-api-key': this.client.apiKeys.mail };
                        if (options === null || options === void 0 ? void 0 : options.idempotencyKey) {
                            headers['Idempotency-Key'] = options.idempotencyKey;
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'cheques'), headers, undefined, form)];
                    case 1:
                        resp = _f.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), check: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to progress a Test Check - but only a Test Check, to it's
     * next state. This can be used to test the webhooks to make sure all the
     * messages are making it back correctly.
     */
    CheckApi.prototype.progress = function (id) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'cheques', id, 'progressions'), { 'x-api-key': this.client.apiKeys.mail })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), check: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to take a Check id and delete that Check from the set
     * at PostGrid. If the check isn't in the system, then we will return
     * the appropriate error.
     */
    CheckApi.prototype.delete = function (id) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('DELETE', path_1.default.join(this.baseRoute, 'cheques', id), { 'x-api-key': this.client.apiKeys.mail })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), check: resp.payload }];
                }
            });
        });
    };
    return CheckApi;
}());
exports.CheckApi = CheckApi;

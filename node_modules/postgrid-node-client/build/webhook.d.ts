import type { PostGrid, PostGridOptions, PostGridError } from './';
export interface Webhook {
    id: string;
    object: string;
    live: boolean;
    url: string;
    description?: string;
    secret: string;
    enabledEvents: string[];
    enabled: boolean;
    metadata?: any;
}
export interface WebhookList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: Webhook[];
}
export interface WebhookInvocation {
    id: string;
    object: string;
    webhook: string;
    type: string;
    statusCode: number;
    orderID?: string;
}
export interface WebhookInvocationList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: WebhookInvocation[];
}
export declare class WebhookApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    get(id: string): Promise<{
        success: boolean;
        webhook?: Webhook;
        error?: PostGridError;
    }>;
    list(limit?: number, skip?: number): Promise<{
        success: boolean;
        webhooks?: WebhookList;
        error?: PostGridError;
    }>;
    invocations(id: string, limit?: number, skip?: number): Promise<{
        success: boolean;
        invocations?: WebhookInvocationList;
        error?: PostGridError;
    }>;
    create(webhook: {
        url: string;
        description?: string;
        secret?: string;
        enabledEvents: string[];
        enabled?: boolean;
        metadata?: any;
    }): Promise<{
        success: boolean;
        webhook?: Webhook;
        error?: PostGridError;
    }>;
    update(id: string, webhook: {
        url: string;
        description?: string;
        secret?: string;
        enabledEvents: string[];
        enabled?: boolean;
        metadata?: any;
    }): Promise<{
        success: boolean;
        webhook?: Webhook;
        error?: PostGridError;
    }>;
    delete(id: string): Promise<{
        success: boolean;
        webhook?: Webhook;
        error?: PostGridError;
    }>;
}

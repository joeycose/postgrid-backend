/// <reference types="node" />
import type { PostGrid, PostGridOptions, PostGridError } from './';
import type { Contact } from './contact';
export interface Postcard {
    id: string;
    object: string;
    live: boolean;
    description?: string;
    sendDate: Date;
    size: string;
    to: Contact;
    from?: Contact;
    frontHTML?: string;
    backHTML?: string;
    frontTemplate?: string;
    backTemplate?: string;
    uploadedPDF?: string;
    url?: string;
    mergeVariables?: any;
    metadata?: any;
}
export interface PostcardList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: Postcard[];
}
export declare class PostcardApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    get(id: string): Promise<{
        success: boolean;
        postcard?: Postcard;
        error?: PostGridError;
    }>;
    list(limit?: number, skip?: number): Promise<{
        success: boolean;
        postcards?: PostcardList;
        error?: PostGridError;
    }>;
    create(postcard: {
        description?: string;
        sendDate?: Date | string;
        size: string;
        to: Partial<Contact> | string;
        from?: Partial<Contact> | string;
        frontHTML?: string;
        backHTML?: string;
        frontTemplate?: string;
        backTemplate?: string;
        pdf?: Buffer | string;
        url?: string;
        mergeVariables?: any;
        metadata?: any;
        express?: boolean;
    }, options?: {
        idempotencyKey?: string;
    }): Promise<{
        success: boolean;
        postcard?: Postcard;
        error?: PostGridError;
        message?: string;
    }>;
    progress(id: string): Promise<{
        success: boolean;
        postcard?: Postcard;
        error?: PostGridError;
    }>;
    delete(id: string): Promise<{
        success: boolean;
        postcard?: Postcard;
        error?: PostGridError;
    }>;
}

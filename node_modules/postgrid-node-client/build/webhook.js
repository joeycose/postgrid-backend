"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookApi = void 0;
var path_1 = __importDefault(require("path"));
var _1 = require("./");
var WebhookApi = /** @class */ (function () {
    function WebhookApi(client, options) {
        this.client = client;
        this.baseRoute = 'print-mail/v1/';
    }
    /*
     * Function to take a Webhook id and return the Webhook object in the
     * response. If the webhook isn't in the system, then we will return
     * the appropriate error.
     */
    WebhookApi.prototype.get = function (id) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'webhooks', id), { 'x-api-key': this.client.apiKeys.mail })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), webhook: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to list all the Webhooks registered at PostGrid by this account,
     * and return them in the response. This will be based on the PostGrid
     * 'List' paging scheme - so there's that.
     */
    WebhookApi.prototype.list = function (limit, skip) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'webhooks'), { 'x-api-key': this.client.apiKeys.mail }, { skip: skip || 0, limit: limit || 40 })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                webhooks: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to list all the invocations of a specific Webhook by the
     * PostGrid service and return them in the response. This will be based
     * on the PostGrid 'List' paging scheme - so there's that.
     */
    WebhookApi.prototype.invocations = function (id, limit, skip) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'webhooks', id, 'invocations'), { 'x-api-key': this.client.apiKeys.mail }, { skip: skip || 0, limit: limit || 40 })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                invocations: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to create a webhook within PostGrid, and PostGrid wants to keep
     * the creation separate from the updating, so this is just to make a new
     * one, and the updates are handled in the update() function.
     */
    WebhookApi.prototype.create = function (webhook) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var body, resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        body = webhook;
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'webhooks'), { 'x-api-key': this.client.apiKeys.mail }, undefined, body)];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), webhook: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to update an existing webhook within PostGrid, and PostGrid
     * wants to keep the creation separate from the updating, so this is just
     * to make changes to an existing one, and the creation is handled in the
     * create() function.
     */
    WebhookApi.prototype.update = function (id, webhook) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var body, resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        body = webhook;
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'webhooks', id), { 'x-api-key': this.client.apiKeys.mail }, undefined, body)];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), webhook: resp.payload }];
                }
            });
        });
    };
    /*
     * Function to take a Webhook id and delete that Webhook from the set
     * at PostGrid. If the webhook isn't in the system, then we will return
     * the appropriate error.
     */
    WebhookApi.prototype.delete = function (id) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.mail) {
                            return [2 /*return*/, _1.NO_MAIL_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('DELETE', path_1.default.join(this.baseRoute, 'webhooks', id), { 'x-api-key': this.client.apiKeys.mail })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, { success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)), webhook: resp.payload }];
                }
            });
        });
    };
    return WebhookApi;
}());
exports.WebhookApi = WebhookApi;

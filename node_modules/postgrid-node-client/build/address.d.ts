import type { PostGrid, PostGridOptions, PostGridError } from './';
export interface Address {
    recipient?: string;
    line1: string;
    line2?: string;
    city?: string;
    provinceOrState?: string;
    postalOrZip?: string;
    zipPlus4?: string;
    firmName?: string;
    country?: string;
    countryName?: string;
    status?: string;
}
export interface LookupInfo {
    used: number;
    freeLimit: number;
}
export interface CityState {
    city: string;
    provinceOrState: string;
    country?: string;
}
export declare class AddressApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    lookupInfo(): Promise<{
        success: boolean;
        info?: {
            status: string;
            message: string;
            data: LookupInfo;
        };
        error?: PostGridError;
    }>;
    verify(address: string | Partial<Address>): Promise<{
        success: boolean;
        verified: boolean;
        address?: {
            status: string;
            message: string;
            data: Address;
        };
        error?: PostGridError;
    }>;
    autocompletePreviews(street: string, country?: string): Promise<{
        success: boolean;
        previews?: {
            status: string;
            message: string;
            data: Partial<Address>[];
        };
        error?: PostGridError;
    }>;
    autocompleteAddress(address: Partial<Address>): Promise<{
        success: boolean;
        addresses?: {
            status: string;
            message: string;
            data: Address[];
        };
        error?: PostGridError;
    }>;
    batchVerify(addresses: (string | Partial<Address>)[]): Promise<{
        success: boolean;
        addresses?: {
            status: string;
            message: string;
            data: Address[];
        };
        error?: PostGridError;
    }>;
    suggestAddresses(address: string | Partial<Address>): Promise<{
        success: boolean;
        addresses?: {
            status: string;
            message: string;
            data: any;
        };
        error?: PostGridError;
    }>;
    parseAddress(address: string): Promise<{
        success: boolean;
        address?: {
            status: string;
            message: string;
            data: any;
        };
        error?: PostGridError;
    }>;
    lookupCityState(postalCode: string): Promise<{
        success: boolean;
        address?: {
            status: string;
            message: string;
            data: CityState;
        };
        error?: PostGridError;
    }>;
}

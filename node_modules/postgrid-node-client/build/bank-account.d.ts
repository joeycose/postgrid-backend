/// <reference types="node" />
import type { PostGrid, PostGridOptions, PostGridError } from './';
export interface BankAccount {
    id: string;
    object: string;
    live: boolean;
    description?: string;
    bankName: string;
    bankPrimaryLine?: string;
    bankSecondaryLine?: string;
    bankCountryCode: string;
    transitNumber: string;
    routeNumber: string;
    routingNumber: string;
    accountNumber: string;
    accountNumberLast4: string;
    signatureImage?: Buffer | string;
    signatureText?: string;
    metadata?: any;
}
export interface BankAccountList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: BankAccount[];
}
export declare class BankAccountApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    get(id: string): Promise<{
        success: boolean;
        account?: BankAccount;
        error?: PostGridError;
    }>;
    list(limit?: number, skip?: number): Promise<{
        success: boolean;
        accounts?: BankAccountList;
        error?: PostGridError;
    }>;
    create(bankAccount: {
        description?: string;
        bankName: string;
        bankPrimaryLine?: string;
        bankSecondaryLine?: string;
        bankCountryCode: string;
        transitNumber?: string;
        routeNumber?: string;
        routingNumber?: string;
        accountNumber?: string;
        accountNumberLast4?: string;
        signatureImage?: Buffer | string;
        signatureText?: string;
        metadata?: any;
    }): Promise<{
        success: boolean;
        account?: BankAccount;
        error?: PostGridError;
        message?: string;
    }>;
    delete(id: string): Promise<{
        success: boolean;
        account?: BankAccount;
        error?: PostGridError;
    }>;
}

import type { PostGrid, PostGridOptions, PostGridError } from './';
export interface Template {
    id: string;
    object: string;
    live: boolean;
    description?: string;
    html: string;
    metadata?: any;
}
export interface TemplateList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: Template[];
}
export declare class TemplateApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    get(id: string): Promise<{
        success: boolean;
        template?: Template;
        error?: PostGridError;
    }>;
    list(limit?: number, skip?: number): Promise<{
        success: boolean;
        templates?: TemplateList;
        error?: PostGridError;
    }>;
    create(template: {
        description?: string;
        html: string;
        metadata?: any;
    }): Promise<{
        success: boolean;
        template?: Template;
        error?: PostGridError;
    }>;
    update(id: string, template: {
        description?: string;
        html: string;
        metadata?: any;
    }): Promise<{
        success: boolean;
        template?: Template;
        error?: PostGridError;
    }>;
    delete(id: string): Promise<{
        success: boolean;
        template?: Template;
        error?: PostGridError;
    }>;
}

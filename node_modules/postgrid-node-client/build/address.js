"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressApi = void 0;
var path_1 = __importDefault(require("path"));
var _1 = require("./");
var AddressApi = /** @class */ (function () {
    function AddressApi(client, options) {
        this.client = client;
        this.baseRoute = 'v1/addver';
    }
    /*
     * Function to ask the PostGrid Address Verification service what the counts
     * are on the free lookups, and how many have been used to this point on this
     * API Key. This is a simple call to get useful data to make sure things are
     * working well.
     */
    AddressApi.prototype.lookupInfo = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', this.baseRoute, { 'x-api-key': this.client.apiKeys.addr })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                info: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take a freeform address of the form:
     *
     *   '3288 Tara Ln, Indianapolis, IN 46224'
     *
     * or a structured address of the form:
     *
     *   {
     *     line1: '3288 Tara Ln',
     *     city: 'Indianapolis',
     *     postalOrZip: '46224',
     *     provinceOrState: 'IN',
     *   }
     *
     * and validate it with the service, and return the Address - if it validates.
     */
    AddressApi.prototype.verify = function (address) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, __assign(__assign({}, _1.NO_ADDR_API_KEY), { verified: false })];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'verifications'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, { address: address })];
                    case 1:
                        resp = _f.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, {
                                    success: false,
                                    verified: false,
                                    error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error,
                                }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                verified: (resp && ['verified', 'corrected'].includes((_e = (_d = resp.payload) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.status)),
                                address: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to look for possible autocomplete matches for the provided
     * street and country - defaulting to the 'US'. This will return something
     * like:
     *
     *   {
     *     success: true,
     *     previews: {
     *       status: 'success',
     *       message: 'Retrieved verified address completions successfully.',
     *       data: [
     *         { line1: '77 N MAIN ST', city: undefined, postalOrZip: '84622' },
     *         { line1: '77 S MAIN ST', city: undefined, postalOrZip: '84622' },
     *         { line1: '77 N MAIN ST', city: undefined, postalOrZip: '84657' },
     *         { line1: '77 S MAIN ST', city: undefined, postalOrZip: '84657' },
     *         { line1: '77 E MAIN ST', city: undefined, postalOrZip: '84775' },
     *         { line1: '77 W MAIN ST', city: undefined, postalOrZip: '84775' },
     *         { line1: '77 N MAIN ST', city: 'ABERDEEN', postalOrZip: '83210' },
     *         { line1: '77 S MAIN ST', city: 'ABERDEEN', postalOrZip: '83210' },
     *         { line1: '77 N MAIN ST', city: 'ABERDEEN', postalOrZip: '57401' },
     *         { line1: '77 S MAIN ST', city: 'ABERDEEN', postalOrZip: '57401' }
     *       ]
     *     }
     *   }
     *
     * with the street argument of: '77 main st'.
     */
    AddressApi.prototype.autocompletePreviews = function (street, country) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('GET', path_1.default.join(this.baseRoute, 'completions'), { 'x-api-key': this.client.apiKeys.addr }, {
                                properCase: true,
                                partialStreet: street,
                                countryFilter: country || 'US',
                                provInsteadOfPC: false,
                            })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        // map the data to look like Address records for consistency...
                        if (Array.isArray(resp.payload.data)) {
                            resp.payload.data = resp.payload.data
                                .map(function (p) { return p.preview; })
                                .map(function (p) {
                                return { line1: p.address, city: p.city, postalOrZip: p.pc };
                            });
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                previews: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take something like an address preview, above:
     *
     *   {
     *     line1: '77 N MAIN ST',
     *     city: 'ABERDEEN',
     *     provinceOrState: 'ID'
     *   }
     *
     * and do the complete address validation and completion on it returning
     * something like:
     *
     *   {
     *     success: true,
     *     previews: {
     *       status: 'success',
     *       message: 'Retrieved verified address completions successfully.',
     *       data: [
     *         {
     *           line1: '77 S MAIN ST',
     *           city: 'ABERDEEN',
     *           provinceOrState: 'SD',
     *           postalOrZip: '57401',
     *           country: 'US'
     *         }
     *       ]
     *     }
     *   }
     */
    AddressApi.prototype.autocompleteAddress = function (address) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'completions'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, {
                                partialStreet: address.line1,
                                cityFilter: address.city,
                                stateFilter: address.provinceOrState,
                                pcFilter: address.postalOrZip,
                                countryFilter: address.country || 'US',
                            })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        // map the data to look like Address records for consistency...
                        if (Array.isArray(resp.payload.data)) {
                            resp.payload.data = resp.payload.data
                                .map(function (p) { return p.address; })
                                .map(function (p) {
                                return {
                                    line1: p.address,
                                    city: p.city,
                                    provinceOrState: p.prov,
                                    postalOrZip: p.pc,
                                    country: p.country,
                                };
                            });
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                addresses: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take a batch of up to 2000 freeform or structured addresses
     * and return each one verified - or not - and complete. The output will
     * look something like this:
     *
     *   {
     *     success: true,
     *     addresses: {
     *       status: 'success',
     *       message: 'Verified address batch successfully.',
     *       data: [
     *         {
     *           line1: '3288 Tara Ln',
     *           city: 'Indianapolis',
     *           postalOrZip: '46224',
     *           provinceOrState: 'IN',
     *           country: 'us',
     *           countryName: 'UNITED STATES',
     *           zipPlus4: '2231',
     *           status: 'verified',
     *           errors: {}
     *         },
     *         {
     *           line1: '3000 Tara Ln  ',
     *           city: 'Indianapolis',
     *           postalOrZip: '46224',
     *           provinceOrState: 'in',
     *           status: 'failed',
     *           errors: {}
     *         },
     *         {
     *           line1: '77 S Main St',
     *           city: 'Aberdeen',
     *           postalOrZip: '57401',
     *           provinceOrState: 'SD',
     *           country: 'us',
     *           countryName: 'UNITED STATES',
     *           zipPlus4: '4218',
     *           status: 'verified',
     *           errors: {}
     *         }
     *       ]
     *     }
     *   }
     */
    AddressApi.prototype.batchVerify = function (addresses) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'verifications/batch'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, { addresses: addresses })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        // map the data to look like Address records for consistency...
                        if (Array.isArray(resp.payload.data.results)) {
                            resp.payload.data = resp.payload.data.results
                                .map(function (p) { return p.verifiedAddress; });
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                addresses: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take a _guess_ at a freeform or structured address, and
     * pull back all the suggestions for the correct address that could be
     * returned. This will look at different parts of the address in order
     * to "find" the actual address you're looking for. The result will be
     * something like:
     *
     *   {
     *     success: true,
     *     addresses: {
     *       status: 'success',
     *       message: 'Address suggestions retrieved successfully.',
     *       data: [
     *         {
     *           city: 'Aberdeen',
     *           country: 'us',
     *           countryName: 'UNITED STATES',
     *           errors: {},
     *           line1: '77 N Main St',
     *           postalOrZip: '57401',
     *           provinceOrState: 'SD',
     *           status: 'verified',
     *           zipPlus4: '3428'
     *         },
     *         {
     *           city: 'Aberdeen',
     *           country: 'us',
     *           countryName: 'UNITED STATES',
     *           errors: {},
     *           line1: '77 S Main St',
     *           postalOrZip: '57401',
     *           provinceOrState: 'SD',
     *           status: 'verified',
     *           zipPlus4: '4218'
     *         },
     *         ...
     *       },
     *     ]
     *   }
     */
    AddressApi.prototype.suggestAddresses = function (address) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'suggestions'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, { address: address })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                addresses: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take a freeform address and parse it into all the components
     * that PostGrid recognizes. If the address argument is:
     *
     *   '3288 Tara Ln, Indianapolis, IN 46224'
     *
     * then the result will be:
     *
     *   {
     *     success: true,
     *     address: {
     *       status: 'success',
     *       message: 'Success.',
     *       data: {
     *         city: 'indianapolis',
     *         houseNumber: '3288',
     *         postcode: '46224',
     *         road: 'tara ln',
     *         state: 'in'
     *       }
     *     }
     *   }
     */
    AddressApi.prototype.parseAddress = function (address) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'parses'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, { address: address })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                address: resp.payload,
                            }];
                }
            });
        });
    };
    /*
     * Function to take a freeform address and parse it into all the components
     * that PostGrid recognizes. If the address argument is:
     *
     *   '60540'
     *
     * then the result will be:
     *
     *   {
     *     success: true,
     *     address: {
     *       status: 'success',
     *       message: 'Success.',
     *       data: {
     *         city: 'NAPERVILLE',
     *         provinceOrState: 'IL'
     *       }
     *     }
     *   }
     */
    AddressApi.prototype.lookupCityState = function (postalCode) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // make sure we have the API Key for this call
                        if (!this.client.apiKeys.addr) {
                            return [2 /*return*/, _1.NO_ADDR_API_KEY];
                        }
                        return [4 /*yield*/, this.client.fire('POST', path_1.default.join(this.baseRoute, 'city_states'), { 'x-api-key': this.client.apiKeys.addr }, { properCase: true }, { postalOrZip: postalCode })];
                    case 1:
                        resp = _d.sent();
                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.response) === null || _a === void 0 ? void 0 : _a.status) >= 400) {
                            return [2 /*return*/, { success: false, error: (_b = resp === null || resp === void 0 ? void 0 : resp.payload) === null || _b === void 0 ? void 0 : _b.error }];
                        }
                        return [2 /*return*/, {
                                success: (resp && !((_c = resp.payload) === null || _c === void 0 ? void 0 : _c.error)),
                                address: resp.payload,
                            }];
                }
            });
        });
    };
    return AddressApi;
}());
exports.AddressApi = AddressApi;

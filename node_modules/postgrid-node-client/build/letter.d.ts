/// <reference types="node" />
import type { PostGrid, PostGridOptions, PostGridError } from './';
import type { Contact } from './contact';
export interface Letter {
    id: string;
    object: string;
    live: boolean;
    description?: string;
    sendDate: Date;
    to: Contact;
    from: Contact;
    html?: string;
    template?: string;
    uploadedPDF?: string;
    addressPlacement: string;
    color: boolean;
    doubleSided: boolean;
    url?: string;
    pageCount?: number;
    mergeVariables?: any;
    metadata?: any;
}
export interface LetterList {
    object: string;
    limit: number;
    skip: number;
    totalCount: number;
    data: Letter[];
}
export declare class LetterApi {
    client: PostGrid;
    baseRoute: string;
    constructor(client: PostGrid, options?: PostGridOptions);
    get(id: string): Promise<{
        success: boolean;
        letter?: Letter;
        error?: PostGridError;
    }>;
    list(limit?: number, skip?: number): Promise<{
        success: boolean;
        letters?: LetterList;
        error?: PostGridError;
    }>;
    create(letter: {
        description?: string;
        sendDate?: Date | string;
        to: Partial<Contact> | string;
        from: Partial<Contact> | string;
        html?: string;
        template?: string;
        uploadedPDF?: string;
        addressPlacement?: string;
        color?: boolean;
        doubleSided?: boolean;
        pdf?: Buffer | string;
        url?: string;
        pageCount?: number;
        mergeVariables?: any;
        metadata?: any;
        express?: boolean;
        extraService?: string;
    }, options?: {
        idempotencyKey?: string;
    }): Promise<{
        success: boolean;
        letter?: Letter;
        error?: PostGridError;
        message?: string;
    }>;
    progress(id: string): Promise<{
        success: boolean;
        letter?: Letter;
        error?: PostGridError;
    }>;
    delete(id: string): Promise<{
        success: boolean;
        letter?: Letter;
        error?: PostGridError;
    }>;
}

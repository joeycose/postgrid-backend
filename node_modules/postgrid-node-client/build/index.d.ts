import FormData = require('formdata');
import { ContactApi } from './contact';
import { TemplateApi } from './template';
import { LetterApi } from './letter';
import { PostcardApi } from './postcard';
import { BankAccountApi } from './bank-account';
import { CheckApi } from './check';
import { WebhookApi } from './webhook';
import { AddressApi } from './address';
export interface PostGridApiKeys {
    mail?: string;
    addr?: string;
}
export interface PostGridOptions {
    host?: string;
    apiKeys: PostGridApiKeys;
    webhookUrl?: string;
    webhookSecret?: string;
    webhookEvents?: string[];
}
export interface PostGridError {
    type: string;
    message: string;
}
export declare class PostGrid {
    host: string;
    apiKeys: PostGridApiKeys;
    webhookUrl?: string;
    webhookSecret?: string;
    webhookEvents?: string[];
    contact: ContactApi;
    template: TemplateApi;
    letter: LetterApi;
    postcard: PostcardApi;
    bankAccount: BankAccountApi;
    check: CheckApi;
    webhook: WebhookApi;
    address: AddressApi;
    constructor(apiKeys: PostGridApiKeys | string, options?: PostGridOptions);
    fire(method: string, uri: string, headers?: any, query?: {
        [index: string]: number | string | boolean;
    }, body?: object | object[] | FormData): Promise<{
        response: any;
        payload?: any;
    }>;
}
export declare function mkError(message: string): PostGridError;
export declare const NO_ADDR_API_KEY: {
    success: boolean;
    error: PostGridError;
};
export declare const NO_MAIL_API_KEY: {
    success: boolean;
    error: PostGridError;
};
